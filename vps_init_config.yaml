- name: Deploy initial configuration to VPS
  hosts: vps_init
  become: yes
  gather_facts: true
  vars:
    tailscale_auth_key: "<your_tailscale_auth_key>" # Replace with your Tailscale auth key
    tailscale_subnets: [] # Advertise all subnets, IPv4 and IPv6 Example ["0.0.0.0/0", "::/0"]
    configure_tailscale: true # Set to false to skip Tailscale setup. Ensure expose_ssh_port is set to true so you dont lose ssh access.
    expose_ssh_port: false # Set to true to expose SSH port to the internet
    tcp_ports:
      - 80       # HTTP
      - 443      # HTTPS
    udp_ports: [] # Add any UDP ports if required
    ansible_user_name: "username" 
    ansible_user_password: "password1"
    # Generate a new SSH key pair and replace the value below for all autorized keys for ansible user.
    ansible_user_ssh_key: |
      ssh-rsa abc123 user@host
    # If the user you are running the playbook with contains the same private key and public as your ansible user you can use the following line to copy the public key to the ansible user.
    # ansible_user_ssh_key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"
  tasks:
    # Update and upgrade packages
    - name: Update and upgrade packages for Debian/Ubuntu
      ansible.builtin.apt:
        update_cache: yes
        upgrade: full  # Options: 'full' for full upgrade (dist-upgrade)
        autoremove: yes # Optional: removes unneeded packages
      when: ansible_facts['os_family'] == "Debian"
      register: step_upgrade_packages_debian

    - name: Update and upgrade packages for AlmaLinux/RedHat/CentOS
      ansible.builtin.yum:
        name: '*'
        state: latest
      when: ansible_facts['os_family'] == "RedHat"
      register: step_upgrade_packages_redhat

    - name: Clean up package cache for AlmaLinux/RedHat/CentOS
      ansible.builtin.yum:
        name: '*'
        state: latest
        autoclean: yes
      when: ansible_facts['os_family'] == "RedHat"
      when: step_upgrade_packages_redhat.changed

    - name: Ensure sudo is installed (for Ubuntu/Debian)
      apt:
        name: sudo
        state: present
      when: ansible_os_family == "Debian"
    
    - name: Ensure sudo is installed (for RedHat/CentOS)
      yum:
        name: sudo
        state: present
      when: ansible_os_family == "RedHat"

    - name: Ensure the user is added to the sudo group (optional)
      user:
        name: "{{ ansible_user }}"
        groups: sudo
        append: yes
        state: present
      when: ansible_os_family == "Debian"
    
    - name: Ensure the user is added to the wheel group (for CentOS/RedHat, optional)
      user:
        name: "{{ ansible_user }}"
        groups: wheel
        append: yes
        state: present
      when: ansible_os_family == "RedHat"

    # Create the ansible user
    - name: Create the ansible user
      ansible.builtin.user:
        name: "{{ ansible_user_name }}"
        password: "{{ ansible_user_password | password_hash('sha512') }}"
        state: present
        groups: sudo
        append: yes
        shell: /bin/bash
      register: step_ansible_user_created

    - name: Allow ansible user full sudo access
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/{{ ansible_user_name }}"
        content: "{{ ansible_user_name }} ALL=(ALL) NOPASSWD:ALL"
        mode: '0440'
        owner: root
        group: root
      when: step_ansible_user_created.changed

    - name: Set up SSH authorized key directory for ansible user
      ansible.builtin.file:
        path: "/home/{{ ansible_user_name }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user_name }}"
        group: "{{ ansible_user_name }}"
      when: step_ansible_user_created.changed

    - name: Upload the authorized key for ansible user
      ansible.builtin.copy:
        dest: "/home/{{ ansible_user_name }}/.ssh/authorized_keys"
        content: "{{ ansible_user_ssh_key }}"
        mode: '0600'
        owner: "{{ ansible_user_name }}"
        group: "{{ ansible_user_name }}"

    - name: Ensure correct permissions on the home directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user_name }}"
        state: directory
        owner: "{{ ansible_user_name }}"
        group: "{{ ansible_user_name }}"
        mode: '0755'
      when: step_ansible_user_created.changed

    - name: Update ansible_user and ansible_password in inventory
      ansible.builtin.lineinfile:
        path: ./inventory.ini
        regexp: "^{{ inventory_hostname }} ansible_host=.*ansible_user=.*ansible_password=.*"
        line: "{{ inventory_hostname }} ansible_host={{ ansible_host }} ansible_user={{ ansible_user_name }} ansible_password={{ ansible_user_password }} ansible_port={{ ansible_port }}"
      when: step_ansible_user_created.changed

    # Harden SSH configuration
    - name: Backup current SSH config
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.bak
        remote_src: yes

    - name: Update SSH configuration for security
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: "^#?PasswordAuthentication", line: "PasswordAuthentication no" }
        - { regexp: "^#?PermitRootLogin", line: "PermitRootLogin no" }
        - { regexp: "^#?Port", line: "Port {{ ansible_port }}" }
        - { regexp: "^#?MaxAuthTries", line: "MaxAuthTries 3" }
        - { regexp: "^#?PermitEmptyPasswords", line: "PermitEmptyPasswords no" }
        - { regexp: "^#?AllowTcpForwarding", line: "AllowTcpForwarding no" }

    # Install and connect to Tailscale Network
    - block:
        - name: Update apt cache (Debian/Ubuntu)
          apt:
            update_cache: yes
          when: ansible_os_family == "Debian"

        - name: Install Tailscale
          apt:
            name: tailscale
            state: present
          when: ansible_os_family == "Debian"

        - name: Enable and start Tailscale service
          systemd:
            name: tailscaled
            enabled: yes
            state: started

        - name: Authenticate and connect to Tailscale
          shell: |
            tailscale up \
              --authkey={{ TAILSCALE_AUTH_KEY }} \
              {% if TAILSCALE_SUBNETS is defined and TAILSCALE_SUBNETS|length > 0 %}\
              --advertise-routes={{ TAILSCALE_SUBNETS | join(",") }} \
              {% endif %}\
              --accept-routes
          args:
            warn: false
          register: tailscale_up_result

        - name: Display Tailscale connection output
          debug:
            var: tailscale_up_result.stdout

        - name: Verify Tailscale connection
          command: tailscale status
          register: tailscale_status
          retries: 3
          delay: 5
          until: tailscale_status.rc == 0

        - name: Show Tailscale status
          debug:
            var: tailscale_status.stdout

        - name: Get the Tailscale IP address
          shell: tailscale ip -4 # Use -6 for IPv6
          register: tailscale_ip
          changed_when: false

        - name: Remove old SSH key from known_hosts
          shell: ssh-keygen -R {{ tailscale_ip.stdout }}
          changed_when: false
          delegate_to: localhost

        - name: Update ansible_host in inventory
          lineinfile:
            path: ./inventory.ini
            regexp: "^{{ inventory_hostname }} ansible_host=.*"
            line: "{{ inventory_hostname }} ansible_host={{ tailscale_ip.stdout }} ansible_user={{ ansible_user }} ansible_password={{ ansible_password }} ansible_port={{ ansible_port }}"
          when: ansible_host != tailscale_ip.stdout
      when: configure_tailscale == true

    # Install Docker CE and set up rootless mode
    - name: Update and upgrade the system
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install prerequisites for Docker
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: yes

    - name: Install Docker CE (required for rootless)
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Install additional dependencies for rootless mode
      apt:
        name:
          - uidmap
          - dbus-user-session
        state: present

    - name: Create docker user
      user:
        name: docker
        state: present
        shell: /bin/bash

    - name: Set up Docker rootless environment for docker user
      become: no
      become_user: docker
      shell: |
        dockerd-rootless-setuptool.sh install

    - name: Create /docker directory
      file:
        path: /docker
        state: directory
        owner: docker
        group: docker
        mode: '0755'

    - name: Ensure proper ownership of /docker directory
      file:
        path: /docker
        state: directory
        owner: docker
        group: docker
        recurse: yes

    - name: Ensure Docker rootless service is enabled and started
      systemd:
        name: docker.service
        user: docker
        state: started
        enabled: yes

    # Set up UFW firewall
    - name: Ensure UFW is installed
      apt:
        name: ufw
        state: present
        update_cache: yes

    - name: Allow OpenSSH in UFW with custom port. Only runs if expose_ssh_port is true.
      ufw:
        rule: allow
        port: "{{ ansible_port }}"
        proto: tcp
      when: expose_ssh_port == true

    - name: Allow additional TCP ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ tcp_ports }}"
      when: tcp_ports | length > 0

    - name: Allow additional UDP ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop: "{{ udp_ports }}"
      when: udp_ports | length > 0

    - name: Enable UFW with default deny policy
      ufw:
        state: enabled
        policy: deny

    - name: Reboot VPS
      ansible.builtin.reboot:
        reboot_timeout: 300